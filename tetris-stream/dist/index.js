(()=>{"use strict";var e={314:(e,t,r)=>{r.d(t,{Z:()=>a});var n=r(15),i=r.n(n),o=r(645),s=r.n(o)()(i());s.push([e.id,"html, body, #app {\n  width: 100vw;\n  height: 100vh;\n  background: #333;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n}\n\n#app {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\ncanvas {\n  background: #aaa;\n}","",{version:3,sources:["webpack://./index.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,aAAa;EACb,gBAAgB;AAClB;;AAEA;EACE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;AAClB",sourcesContent:["html, body, #app {\n  width: 100vw;\n  height: 100vh;\n  background: #333;\n}\n\n* {\n  margin: 0;\n  padding: 0;\n}\n\n#app {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\ncanvas {\n  background: #aaa;\n}"],sourceRoot:""}]);const a=s},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=e(t);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(e,r,n){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(n)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(i[s]=!0)}for(var a=0;a<e.length;a++){var c=[].concat(e[a]);n&&i[c[0]]||(r&&(c[2]?c[2]="".concat(r," and ").concat(c[2]):c[2]=r),t.push(c))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}e.exports=function(e){var r,n,i=(n=4,function(e){if(Array.isArray(e))return e}(r=e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,i,o=[],s=!0,a=!1;try{for(r=r.call(e);!(s=(n=r.next()).done)&&(o.push(n.value),!t||o.length!==t);s=!0);}catch(e){a=!0,i=e}finally{try{s||null==r.return||r.return()}finally{if(a)throw i}}return o}}(r,n)||function(e,r){if(e){if("string"==typeof e)return t(e,r);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?t(e,r):void 0}}(r,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=i[1],s=i[3];if(!s)return o;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),h="/*# ".concat(c," */"),l=s.sources.map((function(e){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(e," */")}));return[o].concat(l).concat([h]).join("\n")}return[o].join("\n")}},530:(e,t,r)=>{r.r(t),r.d(t,{default:()=>g});var n=r(379),i=r.n(n),o=r(795),s=r.n(o),a=r(569),c=r.n(a),h=r(565),l=r.n(h),u=r(216),d=r.n(u),p=r(589),f=r.n(p),m=r(314),y={};y.styleTagTransform=f(),y.setAttributes=l(),y.insert=c().bind(null,"head"),y.domAPI=s(),y.insertStyleElement=d(),i()(m.Z,y);const g=m.Z&&m.Z.locals?m.Z.locals:void 0},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var o={},s=[],a=0;a<e.length;a++){var c=e[a],h=n.base?c[0]+n.base:c[0],l=o[h]||0,u="".concat(h," ").concat(l);o[h]=l+1;var d=r(u),p={css:c[1],media:c[2],sourceMap:c[3]};-1!==d?(t[d].references++,t[d].updater(p)):t.push({identifier:u,updater:i(p,n),references:1}),s.push(u)}return s}function i(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r.update(e=t)}else r.remove()}}e.exports=function(e,i){var o=n(e=e||[],i=i||{});return function(e){e=e||[];for(var s=0;s<o.length;s++){var a=r(o[s]);t[a].references--}for(var c=n(e,i),h=0;h<o.length;h++){var l=r(o[h]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}o=c}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n=r.css,i=r.media,o=r.sourceMap;i?e.setAttribute("media",i):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(n,e)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},778:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Bind=void 0,t.Bind=function(e){return(t,r,n)=>{const{value:i}=n||{};if("function"!=typeof i)return n;const o=Symbol(r);return{get(){return this[o]||(this[o]=i.bind(e||this))}}}}},929:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Figure=void 0;const n=r(319),i=r(664),o=r(138);class s extends i.SizedArray{constructor(){super(...arguments),this.x=0,this.y=0,this.previewState={x:this.x,y:this.y,map:this.clonedMap}}get randomColor(){const[e,...t]=s.colors,[r]=o.randomSort(t);return s.colors.indexOf(r)}static make(...e){let t=e.length,r=0;for(let t of e)t.length>r&&(r=t.length);const i=new s(r,t);for(let[t,r]of i.entries()){const o=e[r]?.[t]||" ";i.set(n.p(t,r)," "==o?0:1)}return i}save(){this.previewState={x:this.x,y:this.y,map:this.clonedMap}}back(){this.x=this.previewState.x,this.y=this.previewState.y,this.map=this.previewState.map}move(e,t){return this.save(),this.x+=e,this.y+=t,this}haveCollizion(e,t=!1){for(let[r,i,o]of this.entries())if(o){if(r+=this.x,i+=this.y,r<0||r>=e.width)return!0;if(t&&i<0||i>=e.height)return!0;if(e.get(n.p(r,i)))return!0}return!1}rotate(){this.save();const e=this.clone(),{height:t,width:r}=this;this.width=t,this.height=r;for(let[r,i,o]of e.entries())this.set(n.p(t-1-i,r),o);return this}clone(){const{width:e,height:t}=this,r=new s(e,t);return r.x=this.x,r.y=this.y,r.map=this.clonedMap,r}color(e=this.randomColor){for(let[t,r,i]of this.entries())this.set(n.p(t,r),i?e:0);return this}position(e,t){return this.x=e,this.y=t,this}}t.Figure=s,s.colors=["transparent","red","green","blue","#00FFFF","#FF00FE","#FFFF14","#0000FE"]},786:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getRandomFigure=t.figuresArray=t.Z=t.S=t.L=t.J=t.T=t.O=t.I=void 0;const n=r(929),i=r(138);t.I=n.Figure.make("    ","####","    ","    "),t.O=n.Figure.make("##","##"),t.T=n.Figure.make("   ","###"," # "),t.J=n.Figure.make(" # "," # ","## "),t.L=n.Figure.make(" # "," # "," ##"),t.S=n.Figure.make(" ##","## ","   "),t.Z=n.Figure.make("## "," ##","   "),t.figuresArray=[t.I,t.O,t.T,t.J,t.L,t.Z],t.getRandomFigure=function(){let e=4*Math.random()|0;const r=i.randomSort([...t.figuresArray])[0].clone().color();for(;e--;)r.rotate();return r}},994:function(e,t,r){var n=this&&this.__decorate||function(e,t,r,n){var i,o=arguments.length,s=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,r,s):i(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s};Object.defineProperty(t,"__esModule",{value:!0}),t.GameEngine=void 0;const i=r(778),o=r(786),s=r(234),a=r(551);class c{constructor(e){this.figure=o.getRandomFigure(),this.map=new s.GameMap,this.next=new s.GameMap(8,8),this.renderer=new a.GameRenderer(this.map),this.rendererNext=new a.GameRenderer(this.next),this.work=!1,this.speed=600,this.isDown=!1,this.tickCount=0,this.previewTick=performance.now(),this.renderer.append(e),this.renderer.render(),this.newFigure(),addEventListener("keydown",this.keyDown),addEventListener("keyup",this.keyUp)}keyUp(e){e.preventDefault(),"ArrowDown"==e.key&&(this.isDown=!1)}keyDown(e){switch(e.preventDefault(),e.key){case"ArrowUp":this.rotate();break;case"ArrowLeft":this.move(-1);break;case"ArrowRight":this.move(1);break;case"ArrowDown":e.repeat||(this.isDown=!0)}}rotate(){this.figure.rotate(),this.figure.haveCollizion(this.map)&&this.figure.back(),this.renderer.render()}move(e){this.figure.move(e,0),this.figure.haveCollizion(this.map)&&this.figure.back(),this.renderer.render()}newFigure(){this.figure&&this.map.remove(this.figure),this.figure=o.getRandomFigure(),this.map.add(this.figure);const e=-this.figure.height,t=Math.round(this.map.width/2-this.figure.width/2);this.figure.position(t,e),this.renderer.render()}start(){this.work||(this.work=!0,this.tick())}stop(){this.work&&(this.work=!1)}tick(){if(!this.work)return;requestAnimationFrame(this.tick);const{figure:e}=this;let t=performance.now(),{previewTick:r,speed:n,isDown:i}=this;if(i&&(n=50),!(t<r+n)){if(this.tickCount+=1,this.previewTick=t,e.move(0,1),e.haveCollizion(this.map)){if(e.back(),this.figure.haveCollizion(this.map,!0))return this.stop(),alert("Game Over!"),void location.reload();this.map.fix(this.figure),this.map.checkClear(),this.newFigure()}this.renderer.render()}}}n([i.Bind()],c.prototype,"keyUp",null),n([i.Bind()],c.prototype,"keyDown",null),n([i.Bind()],c.prototype,"rotate",null),n([i.Bind()],c.prototype,"move",null),n([i.Bind()],c.prototype,"newFigure",null),n([i.Bind()],c.prototype,"start",null),n([i.Bind()],c.prototype,"stop",null),n([i.Bind()],c.prototype,"tick",null),t.GameEngine=c},234:function(e,t,r){var n=this&&this.__decorate||function(e,t,r,n){var i,o=arguments.length,s=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,r,s):i(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s};Object.defineProperty(t,"__esModule",{value:!0}),t.GameMap=void 0;const i=r(778),o=r(319),s=r(664);class a extends s.SizedArray{constructor(e=10,t=20){super(e,t),this.figures=[]}entriesRender(){return this.entries().map((([e,t,r])=>{for(let n of this.figures){if(e<n.x||e>n.x+n.width)continue;if(t<n.y||t>n.y+n.height)continue;const i=n.get(o.p(e-n.x,t-n.y));"number"==typeof i&&(r=r||i)}return[e,t,r]}))}add(e){const{figures:t}=this;-1==t.indexOf(e)&&t.push(e)}remove(e){const{figures:t}=this,r=t.indexOf(e);-1!=r&&t.splice(r,1)}fix(e){this.remove(e);for(let[t,r,n]of e.entries())n&&(t+=e.x,r+=e.y,this.set(o.p(t,r),n))}checkClear(e=0){for(let t=0;t<this.height;t++){let r=!0;for(let e=0;e<this.width;e++)if(!this.get(o.p(e,t))){r=!1;break}if(r){const r=t;for(let[e,t,n]of this.entries())t>=r||this.set(o.p(e,t+1),n);this.checkClear(e+1);break}}return e}update(){}render(){}}n([i.Bind()],a.prototype,"entriesRender",null),n([i.Bind()],a.prototype,"add",null),n([i.Bind()],a.prototype,"remove",null),n([i.Bind()],a.prototype,"fix",null),n([i.Bind()],a.prototype,"checkClear",null),n([i.Bind()],a.prototype,"update",null),n([i.Bind()],a.prototype,"render",null),t.GameMap=a},551:function(e,t,r){var n=this&&this.__decorate||function(e,t,r,n){var i,o=arguments.length,s=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,r,s):i(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s};Object.defineProperty(t,"__esModule",{value:!0}),t.GameRenderer=void 0;const i=r(778),o=r(929);class s{constructor(e){this.map=e,this.elem=document.createElement("canvas"),this.ctx=this.elem.getContext("2d"),this.size=20,this.padding=30,this.time=performance.now(),this.deltaTime=0;const{size:t}=this,{width:r,height:n}=e,i=r*t,o=n*t;this.elem.width=i,this.elem.height=o,this.elem.style.width=`${i}px`,this.elem.style.height=`${o}px`,this.elem.style.border="2px solid #999",this.elem.style.imageRendering="pixelated",addEventListener("resize",this.resize),this.resize()}append(e){const t=document.querySelector(e);if(!t)throw new Error("No find element!");t.appendChild(this.elem),this.resize()}resize(){const{padding:e}=this,{parentElement:t}=this.elem;if(!t)return;const{offsetWidth:r,offsetHeight:n}=t,{offsetWidth:i,offsetHeight:o}=this.elem,s=Math.min((r-2*e)/i,(n-2*e)/o);this.elem.style.transform=`scale(${s})`}render(){const{size:e,ctx:t,map:r}=this,{width:n,height:i}=this.map;t.clearRect(0,0,n*e,i*e);for(let[n,i,s]of r.entriesRender()){const r=o.Figure.colors[s]||"transparent",a=n*e,c=i*e;t.beginPath(),t.strokeStyle="#dddddd",t.fillStyle=r,t.strokeRect(a,c,e,e),t.fillRect(a+1,c+1,e-1,e-1),t.closePath()}}}n([i.Bind()],s.prototype,"append",null),n([i.Bind()],s.prototype,"resize",null),n([i.Bind()],s.prototype,"render",null),t.GameRenderer=s},319:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.p=t.Point=void 0;class r{constructor(e,t){this.x=e,this.y=t}}t.Point=r,t.p=function(e,t){return new r(e,t)}},664:function(e,t,r){var n=this&&this.__decorate||function(e,t,r,n){var i,o=arguments.length,s=o<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(s=(o<3?i(s):o>3?i(t,r,s):i(t,r))||s);return o>3&&s&&Object.defineProperty(t,r,s),s};Object.defineProperty(t,"__esModule",{value:!0}),t.SizedArray=void 0;const i=r(778),o=r(319);class s{constructor(e,t){this.width=0,this.height=0,this.map=new Uint8Array(e*t),this.width=e,this.height=t}get clonedMap(){return new Uint8Array(this.map)}entries(){const{width:e,map:t}=this,r=new Array(t.length);for(let n=0;n<t.length;n++){let i=n%e,o=(n-i)/e,s=t[n];r[n]=[i,o,s]}return r}index(e){const{width:t,height:r}=this;if(e instanceof o.Point){const{x:n,y:i}=e;return n<0||n>t-1||i<0||i>r-1?-1:i*this.width+n}return e}get(e){return this.map[this.index(e)]}set(e,t){return this.map[this.index(e)]=0|t}}n([i.Bind()],s.prototype,"entries",null),n([i.Bind()],s.prototype,"index",null),n([i.Bind()],s.prototype,"get",null),n([i.Bind()],s.prototype,"set",null),t.SizedArray=s,new s(10,20)[22]},138:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.randomSort=void 0,t.randomSort=function(e){return e.sort((e=>Math.random()>.5?1:-1))}}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var o=t[n]={id:n,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(530),new(r(994).GameEngine)("#app").start()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,